import random

def print_board(board):
    """Prints the current state of the Tic-Tac-Toe board."""
    print("-------------")
    for row in board:
        print("|", end=" ")
        for cell in row:
            print(cell, end=" | ")
        print("\n-------------")

def check_win(board, player):
    """Checks if the given player has won the game."""
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    """Checks if the Tic-Tac-Toe board is full."""
    return all(all(cell != " " for cell in row) for row in board)

def get_player_move(board):
    """Gets the move from the human player."""
    while True:
        try:
            row = int(input("Enter the row (1-3): "))
            col = int(input("Enter the column (1-3): "))
            if 1 <= row <= 3 and 1 <= col <= 3 and board[row - 1][col - 1] == " ":
                return row - 1, col - 1
            else:
                print("Invalid move. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def get_computer_move(board):
    """Gets the move from the computer."""
    # Prioritize winning moves
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "O"
                if check_win(board, "O"):
                    board[row][col] = " "
                    return row, col
                board[row][col] = " "
    # Prioritize blocking opponent's winning moves
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "X"
                if check_win(board, "X"):
                    board[row][col] = " "
                    return row, col
                board[row][col] = " "
    # Choose a random empty cell
    empty_cells = [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]
    if empty_cells:
        return random.choice(empty_cells)
    else:
        return None  # Board is full

def play_game():
    """Plays a Tic-Tac-Toe game."""
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"
    while True:
        print_board(board)
        if current_player == "X":
            row, col = get_player_move(board)
        else:
            row, col = get_computer_move(board)
        board[row][col] = current_player
        if check_win(board, current_player):
            print_board(board)
            print(f"{current_player} wins!")
            break
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        current_player = "O" if current_player == "X" else "X"

if __name__ == "__main__":
    play_game()
